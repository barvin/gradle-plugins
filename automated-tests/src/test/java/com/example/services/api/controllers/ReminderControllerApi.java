/*
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.example.services.api.controllers;

import com.google.gson.reflect.TypeToken;
import com.example.entities.generated.Reminder;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.response.Response;

import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import com.example.services.api.client.JSON;

import static io.restassured.http.Method.*;

public class ReminderControllerApi {

    private RequestSpecBuilder reqSpec;

    private ReminderControllerApi(RequestSpecBuilder reqSpec) {
        this.reqSpec = reqSpec;
    }

    public static ReminderControllerApi reminderController(RequestSpecBuilder reqSpec) {
        return new ReminderControllerApi(reqSpec);
    }


    public CreateUpdateUsingPUTOper createUpdateUsingPUT() {
        return new CreateUpdateUsingPUTOper(reqSpec);
    }

    public DeleteUsingDELETEOper deleteUsingDELETE() {
        return new DeleteUsingDELETEOper(reqSpec);
    }

    public ReadUsingGETOper readUsingGET() {
        return new ReadUsingGETOper(reqSpec);
    }

    /**
    * Customise request specification
    */
    public ReminderControllerApi reqSpec(Consumer<RequestSpecBuilder> consumer) {
        consumer.accept(reqSpec);
        return this;
    }

    /**
     * Add (if id is null) or update (if id is a number) the reminder
     * 
     *
     * @see #body reminder (required)
     * return String
     */
    public class CreateUpdateUsingPUTOper {

        public static final String REQ_URI = "/reminder";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public CreateUpdateUsingPUTOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        public CreateUpdateUsingPUTOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PUT /reminder
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(PUT, REQ_URI));
        }

        /**
         * PUT /reminder
         * @return String
         */
        public String executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<String>(){}.getType();
            return execute(handler).as(type);
        }

         /**
         * @param reminder (Reminder) reminder (required)
         */
        public CreateUpdateUsingPUTOper body(Reminder reminder) {
            reqSpec.setBody(reminder);
            return this;
        }

        /**
         * Customise request specification
         */
        public CreateUpdateUsingPUTOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         */
        public CreateUpdateUsingPUTOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * Delete the reminder by ID
     * 
     *
     * @see #idQuery id (required)
     * return String
     */
    public class DeleteUsingDELETEOper {

        public static final String REQ_URI = "/reminder";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public DeleteUsingDELETEOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        public DeleteUsingDELETEOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * DELETE /reminder
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(DELETE, REQ_URI));
        }

        /**
         * DELETE /reminder
         * @return String
         */
        public String executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<String>(){}.getType();
            return execute(handler).as(type);
        }

        /**
         * @param id (Integer) id (required)
         */
        public DeleteUsingDELETEOper idQuery(Object... id) {
            reqSpec.addQueryParam("id", id);
            return this;
        }

        /**
         * Customise request specification
         */
        public DeleteUsingDELETEOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         */
        public DeleteUsingDELETEOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * List all reminders
     * 
     *
     * return List<Object>
     */
    public class ReadUsingGETOper {

        public static final String REQ_URI = "/reminder";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public ReadUsingGETOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        public ReadUsingGETOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /reminder
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(GET, REQ_URI));
        }

        /**
         * GET /reminder
         * @return List<Object>
         */
        public List<Object> executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<List<Object>>(){}.getType();
            return execute(handler).as(type);
        }

        /**
         * Customise request specification
         */
        public ReadUsingGETOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         */
        public ReadUsingGETOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
}