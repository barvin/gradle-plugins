/*
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.example.services.api.controllers;

import com.google.gson.reflect.TypeToken;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.response.Response;

import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import com.example.services.api.client.JSON;

import static io.restassured.http.Method.*;

public class BasicErrorControllerApi {

    private RequestSpecBuilder reqSpec;

    private BasicErrorControllerApi(RequestSpecBuilder reqSpec) {
        this.reqSpec = reqSpec;
    }

    public static BasicErrorControllerApi basicErrorController(RequestSpecBuilder reqSpec) {
        return new BasicErrorControllerApi(reqSpec);
    }


    public ErrorUsingDELETEOper errorUsingDELETE() {
        return new ErrorUsingDELETEOper(reqSpec);
    }

    public ErrorUsingGETOper errorUsingGET() {
        return new ErrorUsingGETOper(reqSpec);
    }

    public ErrorUsingHEADOper errorUsingHEAD() {
        return new ErrorUsingHEADOper(reqSpec);
    }

    public ErrorUsingOPTIONSOper errorUsingOPTIONS() {
        return new ErrorUsingOPTIONSOper(reqSpec);
    }

    public ErrorUsingPATCHOper errorUsingPATCH() {
        return new ErrorUsingPATCHOper(reqSpec);
    }

    public ErrorUsingPOSTOper errorUsingPOST() {
        return new ErrorUsingPOSTOper(reqSpec);
    }

    public ErrorUsingPUTOper errorUsingPUT() {
        return new ErrorUsingPUTOper(reqSpec);
    }

    /**
    * Customise request specification
    */
    public BasicErrorControllerApi reqSpec(Consumer<RequestSpecBuilder> consumer) {
        consumer.accept(reqSpec);
        return this;
    }

    /**
     * error
     * 
     *
     * return Map<String, Object>
     */
    public class ErrorUsingDELETEOper {

        public static final String REQ_URI = "/error";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public ErrorUsingDELETEOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        public ErrorUsingDELETEOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * DELETE /error
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(DELETE, REQ_URI));
        }

        /**
         * DELETE /error
         * @return Map<String, Object>
         */
        public Map<String, Object> executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<Map<String, Object>>(){}.getType();
            return execute(handler).as(type);
        }

        /**
         * Customise request specification
         */
        public ErrorUsingDELETEOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         */
        public ErrorUsingDELETEOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * error
     * 
     *
     * return Map<String, Object>
     */
    public class ErrorUsingGETOper {

        public static final String REQ_URI = "/error";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public ErrorUsingGETOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        public ErrorUsingGETOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /error
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(GET, REQ_URI));
        }

        /**
         * GET /error
         * @return Map<String, Object>
         */
        public Map<String, Object> executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<Map<String, Object>>(){}.getType();
            return execute(handler).as(type);
        }

        /**
         * Customise request specification
         */
        public ErrorUsingGETOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         */
        public ErrorUsingGETOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * error
     * 
     *
     * return Map<String, Object>
     */
    public class ErrorUsingHEADOper {

        public static final String REQ_URI = "/error";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public ErrorUsingHEADOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        public ErrorUsingHEADOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * HEAD /error
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(HEAD, REQ_URI));
        }

        /**
         * HEAD /error
         * @return Map<String, Object>
         */
        public Map<String, Object> executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<Map<String, Object>>(){}.getType();
            return execute(handler).as(type);
        }

        /**
         * Customise request specification
         */
        public ErrorUsingHEADOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         */
        public ErrorUsingHEADOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * error
     * 
     *
     * return Map<String, Object>
     */
    public class ErrorUsingOPTIONSOper {

        public static final String REQ_URI = "/error";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public ErrorUsingOPTIONSOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        public ErrorUsingOPTIONSOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * OPTIONS /error
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(OPTIONS, REQ_URI));
        }

        /**
         * OPTIONS /error
         * @return Map<String, Object>
         */
        public Map<String, Object> executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<Map<String, Object>>(){}.getType();
            return execute(handler).as(type);
        }

        /**
         * Customise request specification
         */
        public ErrorUsingOPTIONSOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         */
        public ErrorUsingOPTIONSOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * error
     * 
     *
     * return Map<String, Object>
     */
    public class ErrorUsingPATCHOper {

        public static final String REQ_URI = "/error";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public ErrorUsingPATCHOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        public ErrorUsingPATCHOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /error
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(PATCH, REQ_URI));
        }

        /**
         * PATCH /error
         * @return Map<String, Object>
         */
        public Map<String, Object> executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<Map<String, Object>>(){}.getType();
            return execute(handler).as(type);
        }

        /**
         * Customise request specification
         */
        public ErrorUsingPATCHOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         */
        public ErrorUsingPATCHOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * error
     * 
     *
     * return Map<String, Object>
     */
    public class ErrorUsingPOSTOper {

        public static final String REQ_URI = "/error";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public ErrorUsingPOSTOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        public ErrorUsingPOSTOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /error
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(POST, REQ_URI));
        }

        /**
         * POST /error
         * @return Map<String, Object>
         */
        public Map<String, Object> executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<Map<String, Object>>(){}.getType();
            return execute(handler).as(type);
        }

        /**
         * Customise request specification
         */
        public ErrorUsingPOSTOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         */
        public ErrorUsingPOSTOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * error
     * 
     *
     * return Map<String, Object>
     */
    public class ErrorUsingPUTOper {

        public static final String REQ_URI = "/error";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public ErrorUsingPUTOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        public ErrorUsingPUTOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PUT /error
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(PUT, REQ_URI));
        }

        /**
         * PUT /error
         * @return Map<String, Object>
         */
        public Map<String, Object> executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<Map<String, Object>>(){}.getType();
            return execute(handler).as(type);
        }

        /**
         * Customise request specification
         */
        public ErrorUsingPUTOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         */
        public ErrorUsingPUTOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
}